
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isSeller() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
    }
    function isPartner() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['affiliate', 'super_affiliate', 'associate', 'channel', 'franchisee'];
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection
    match /users/{userId} {
      allow create: if isSignedIn();
      allow read: if isSignedIn();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
      
      // Documents subcollection
      match /documents/{docId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Wallets collection
    match /wallets/{userId} {
        allow read: if isOwner(userId) || isAdmin();
        // Writes are only allowed through specific transactions managed by backend logic/rules
        allow write: if isAdmin();
    }
    
    match /reward_transactions/{transactionId} {
        allow read: if isSignedIn();
        allow create: if isAdmin() || isSeller();
    }
    
     match /withdrawal_requests/{requestId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isAdmin() || isSeller();
    }
    
    match /receivables/{receivableId} {
        allow read: if isSignedIn();
        allow create, update: if isAdmin() || isSeller();
    }
    
    match /payables/{payableId} {
        allow read: if isSignedIn();
        allow create, update: if isAdmin() || isSeller();
    }


    // Properties can be read by anyone, but only created/updated by sellers/admins
    match /properties/{propertyId} {
      allow read: if true;
      allow create, update: if isSignedIn() && (isSeller() || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Leads can be created by partners, but only read by involved parties
    match /leads/{leadId} {
        allow create: if isPartner();
        allow read, update: if isSignedIn(); // Simplified for now
    }

    // Appointments
    match /appointments/{appointmentId} {
        allow read: if isSignedIn();
        allow create: if isPartner();
        allow update: if isSeller() || isAdmin() || isPartner();
    }

    // Inquiries from partner websites
    match /inquiries/{inquiryId} {
        allow create: if true; // Publicly accessible form
        allow read: if isSignedIn();
    }

    // Settings, resources, and marketing kits
    match /app_settings/{settingId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    match /resources/{resourceId} {
        allow read: if true;
        allow write: if isAdmin() || isSeller();
        allow delete: if isAdmin();
    }

    match /property_types/{typeId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    match /marketing_kits/{kitId} {
        allow read: if true;
        allow write: if isAdmin() || isSeller();
    }
    
    match /support_tickets/{ticketId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isAdmin();
    }

    match /requirements/{reqId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
    }
    
    match /files/{fileId} {
        allow read: if true;
        allow write: if isSignedIn(); // Allow any authenticated user to write files
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    // Allow public read access to all files
    match /{allPaths=**} {
      allow read: if true;
    }
    // Allow writes only for authenticated users
    match /uploads/{userId}/{fileName} {
      allow write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
