rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read on these collections
    match /properties/{propertyId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'seller');
    }
    match /resources/{resourceId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'seller');
    }
     match /reward_offers/{offerId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && request.auth.token.role == 'admin';
    }
    match /property_types/{typeId} {
        allow read: if true;
        allow create, update, delete: if request.auth != null && request.auth.token.role == 'admin';
    }
     match /files/{fileId} {
      allow read: if true;
      allow create, write: if request.auth != null;
    }

    // Allow authenticated users to read from these collections
    match /users/{userId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth.uid == userId || request.auth.token.role == 'admin';
        allow delete: if request.auth.token.role == 'admin';

        // Documents subcollection
        match /documents/{docId} {
             allow read, write: if request.auth.uid == userId || request.auth.token.role == 'admin';
        }
    }

     match /leads/{leadId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
      allow delete: if request.auth.token.role == 'admin';
    }
    
    match /appointments/{appointmentId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null;
      allow delete: if request.auth.token.role == 'admin';
    }

     match /inquiries/{inquiryId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth.token.role == 'admin';
    }
    
     match /support_tickets/{ticketId} {
      allow read, create: if request.auth != null;
      allow update, delete: if request.auth.token.role == 'admin';
    }
    
     match /requirements/{reqId} {
        allow read, create: if request.auth != null;
        allow update, delete: if request.auth.token.role == 'admin';
    }

    // Allow admins to manage settings, partners to read their own website data
    match /app_settings/{settingId} {
        allow read: if request.auth != null;
        allow write: if request.auth.token.role == 'admin';
    }

    // Wallet related collections
    match /wallets/{walletId} {
        allow read: if request.auth.uid == walletId || request.auth.token.role == 'admin';
        allow write: if request.auth.token.role == 'admin'; // Only admin can update wallet balances directly
    }

    match /withdrawal_requests/{reqId} {
        allow create: if request.auth != null;
        allow read: if request.auth.uid == resource.data.userId || request.auth.token.role == 'admin' || request.auth.token.role == 'seller';
        allow update: if request.auth.token.role == 'admin' || request.auth.token.role == 'seller';
    }
    
     match /reward_transactions/{transId} {
        allow read, create: if request.auth != null;
    }
    
     match /receivables/{recId} {
        allow read, create: if request.auth != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'seller');
        allow update: if request.auth.token.role == 'admin' || request.auth.token.role == 'seller';
    }
     match /payables/{payId} {
        allow read, create: if request.auth != null && (request.auth.token.role == 'admin' || request.auth.token.role == 'seller');
        allow update: if request.auth.token.role == 'admin' || request.auth.token.role == 'seller';
    }
     match /wallet_transactions/{transId} {
        allow read, create: if request.auth != null && request.auth.token.role == 'admin';
    }
  }
}
