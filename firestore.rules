rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // By default, deny all reads and writes.
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection
    // Allow users to read their own data.
    // Allow admins to read any user's data.
    // Allow authenticated users to create their own user document (sign-up).
    // Allow users to update their own data.
    // Allow admins to delete users.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // DOCUMENTS subcollection
      // Only the user or an admin can manage their documents.
      match /documents/{docId} {
        allow read, write: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }
    }

    // Authenticated users can read most top-level collections.
    // Write rules are more specific.
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isSeller() {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'seller';
    }

    // PROPERTIES: Publicly readable, only admins/sellers can manage.
    match /properties/{propertyId} {
      allow read: if true;
      allow create, update: if isAdmin() || isSeller();
      allow delete: if isAdmin();
    }
    
    // FILES: Used for storing images/docs. Accessible if you can access the parent document.
    // This is an example; a more robust solution would check ownership of the referencing document.
    // For now, allow authenticated reads/writes.
     match /files/{fileId} {
      allow read, write: if isAuthenticated();
    }

    // LEADS: Authenticated users can create. Admins/Sellers/Partners can read based on their scope.
    match /leads/{leadId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // APPOINTMENTS: Users can create/manage their own.
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == request.resource.data.partnerId || request.auth.uid == request.resource.data.customerId;
      allow update: if isAdmin() || request.auth.uid == resource.data.partnerId;
    }

    // INQUIRIES from partner websites
    match /inquiries/{inquiryId} {
        allow read: if isAuthenticated() && (isAdmin() || resource.data.partnerId == request.auth.uid);
        allow create: if true; // Public can create inquiries
    }

    // REQUIREMENTS posted by customers
    match /requirements/{reqId} {
        allow read: if isAuthenticated();
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update, delete: if isAdmin() || request.auth.uid == resource.data.ownerId;
    }

    // RESOURCE CENTER: Publicly readable, managed by admins/sellers.
    match /resources/{resourceId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() || isSeller();
    }
    
    // MARKETING KITS: Publicly readable, managed by admins/sellers.
    match /marketing_kits/{kitId} {
      allow read: if true;
      allow create, update, delete: if isAdmin() || isSeller();
    }
    
    // PROPERTY TYPES: Publicly readable, managed by admin.
    match /property_types/{typeId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    // SUPPORT TICKETS: Users can manage their own, admins can manage all.
    match /support_tickets/{ticketId} {
      allow read: if isAdmin() || request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin();
    }

    // WALLETS: Users can read their own, only admins can write.
    match /wallets/{walletId} {
      allow read: if request.auth.uid == walletId || isAdmin();
      allow write: if isAdmin();
    }

    // WALLET TRANSACTIONS: Read-only for involved parties and admins.
    match /wallet_transactions/{transactionId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
    }
    
    // REWARD TRANSACTIONS: Read-only for involved parties and admins.
    match /reward_transactions/{transactionId} {
        allow read: if isAuthenticated();
        allow create: if isAdmin() || isSeller();
    }
    
    // REWARD OFFERS: Publicly readable, managed by admins.
    match /reward_offers/{offerId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
     // RECEIVABLES / PAYABLES: Managed by admins and sellers
    match /receivables/{recId} {
        allow read, write: if isAdmin() || isSeller();
    }
     match /payables/{payId} {
        allow read, write: if isAdmin() || isSeller();
    }
    
    // WITHDRAWAL REQUESTS: Users create their own, admins manage them.
    match /withdrawal_requests/{reqId} {
        allow read: if isAuthenticated();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAdmin() || isSeller();
    }

    // APP SETTINGS: Read-only for authenticated users, writable only by admins.
    match /app_settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}